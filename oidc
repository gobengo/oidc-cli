#!/usr/bin/env bash

# Fail fast
# set -e
# DEBUG
# set -x

usage() {
cat <<-"END"
Operate an OpenID Connect Provider

Usage:
  oidc-cli (baseUrl) create-client
  oidc-cli (baseUrl) save-client
  oidc-cli (baseUrl) configuration
  oidc-cli [baseUrl] list-clients
  oidc-cli client --redirect-uri "http://localhost:3000" --response-type code

Options:
  -h --help           Show this help.
  -k --insecure       Pass -k to cURL. Allow insecure SSL  

Patterns:
  op=https://accounts.livefyre.com
  oidc-cli $op create-client
  oidc-cli $op create-client --save
  oidc-cli list-clients
  oidc-cli $op list-clients
  oidc client --redirect-uri "http://localhost:3000" --response-type code \
    | oidc $op create-client
END
}

# http://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
for i in "$@"
do
case $i in
    -h|--help)
    usage
    exit
    ;;
    # -a=*|--auth=*)
    #   Authorization="${i#*=}"
    #   shift # past argument=value
    # ;;
    # -k|--insecure)
    #   curl_opts="-k $curl_opts"
    # ;;
    # *)
    #   # unknown option
    # ;;
esac
done

base_url=$1
command=$2

commands=(create-client get-client list-clients save-client ls configuration client)

if [[ " ${commands[@]} " =~ " ${base_url} " ]]; then
  command=$base_url
  base_url=$2
fi

if [[ " ${commands[@]} " =~ " ${command} " ]]; then
  # whatever you want to do when arr contains value
  echo > /dev/null
else
  echo "oidc commands are:"
  echo "${commands[@]}"
  echo
  usage
  exit 1
fi

this_file=$(readlink $BASH_SOURCE)
if [[ $this_file == "" ]]; then
  this_file=$BASH_SOURCE
fi
this_dir=$(dirname $this_file)

command_script=$this_dir/commands/$command
# Pop first arg, which is command name.
# shift
args=("$@")
# Strip off first two args (base_url, command)
args="${args[@]:2}"

# Pass rest of args to command script
$command_script $base_url $args
